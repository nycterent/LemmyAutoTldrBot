name: Publish

on:
  workflow_dispatch:
jobs:
  publish:
    runs-on: ubuntu-latest
    environment: prod
    permissions:
      id-token: write
      contents: write
    env:
      APP_ENV: prod
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      LEMMY_PASSWORD: ${{ secrets.LEMMY_PASSWORD }}
      LEMMY_USER: ${{ secrets.LEMMY_USER }}
      SOURCE_CODE_LINK: ${{ secrets.SOURCE_CODE_LINK }}
      BOT_MODE: ${{ secrets.BOT_MODE }}
      LEMMY_MAINTAINER: ${{ secrets.LEMMY_MAINTAINER }}
      AWS_REGION: eu-north-1
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Get changed files
        id: changed_files
        uses: tj-actions/changed-files@v39
        with:
          files_yaml: |
            base:
              - base.Dockerfile
      - name: Wait on base build
        if: steps.changed_files.outputs.base_any_changed == 'true'
        uses: lewagon/wait-on-check-action@v1.3.1
        with:
          ref: ${{ github.ref }}
          check-name: Publish docker
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          wait-interval: 10
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.2
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@master
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-north-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REPOSITORY: group-lt
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
          
      - name: Install serverless
        run: |
          yarn global add serverless@3
          yarn install
      - name: Pull latest image
        env:
          ECR_REPOSITORY: group-lt
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker pull $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker pull public.ecr.aws/lambda/provided:al2
      - name: Login to ECR
        run: aws ecr get-login-password --region eu-central-1 | docker login --username AWS --password-stdin $(aws sts get-caller-identity --query "Account" --output text).dkr.ecr.$AWS_REGION.amazonaws.com
      - name: Deploy app
        run: serverless deploy --stage prod --verbose --region $AWS_REGION
